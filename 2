Написать три структуры данных на выбор 

Стек
Очередь
Односвязанный список

// Стек
func push(s *stack, v any) {
	if s.head == len(s.s) - 1 {
		fmt.Println("Стек полон")
		return
	}
	s.head++
	s.s[s.head] = v
}

func pop(s *stack) any {
	if s.head == -1 {
		fmt.Println("Стек пуст")
		return nil
	}
	v := s.s[s.head]
	s.head--
	return v
}

func peek(s *stack) any {
	if s.head == -1 {
		fmt.Println("Стек пуст")
		return nil
	}
	return s.s[s.head]
}

// Очередь
func push(q *queue, v any) {
	if q.high == q.size - 1 {
		fmt.Println("Очередь полна")
		return
	}
	if q.high == -1 {
		q.low = 0
	}
	q.high++
	q.s[q.high] = v
}

func pop(q *queue) any {
	if q.low == -1 {
		fmt.Println("Очередь пуста")
		return nil
	}
	v := q.s[q.low]
	if q.low == q.high {
		q.low = -1
		q.high = -1
	} else {
		q.low++
	}
	return v
}

// Односвязанный список
func add(l *singlyLinkedList, v any) {
	newItem := &item{v: v}
	if l.first == nil {
		l.first = newItem
	} else {
		l.last.next = newItem
	}
	l.last = newItem
	l.size++
}

func get(l *singlyLinkedList, idx int) any {
	if idx < 0 || idx >= l.size {
		fmt.Println("Индекс вне диапазона")
		return nil
	}
	current := l.first
	for i := 0; i < idx; i++ {
		current = current.next
	}
	return current.v
}

func remove(l *singlyLinkedList, idx int) {
	if idx < 0 || idx >= l.size {
		fmt.Println("Индекс вне диапазона")
		return
	}
	if idx == 0 {
		l.first = l.first.next
		if l.first == nil {
			l.last = nil
		}
	} else {
		current := l.first
		for i := 0; i < idx-1; i++ {
			current = current.next
		}
		current.next = current.next.next
		if current.next == nil {
			l.last = current
		}
	}
	l.size--
}

func values(l *singlyLinkedList) []any {
	values := make([]any, l.size)
	current := l.first
	i := 0
	for current != nil {
		values[i] = current.v
		current = current.next
		i++
	}
	return values
}






конвертер (less2.go)

package main

import (
	"fmt"
)

var romanNumerals = map[rune]int{
	'I': 1,
	'V': 5,
	'X': 10,
	'L': 50,
	'C': 100,
	'D': 500,
	'M': 1000,
}

func romanToArabic(roman string) (int, error) {
	arabic := 0
	lastValue := 0
	for i := len(roman) - 1; i >= 0; i-- {
		value := romanNumerals[rune(roman[i])]
		if value < lastValue {
			arabic -= value
		} else {
			arabic += value
		}
		lastValue = value
	}
	return arabic, nil
}

func main() {
	var input string
	fmt.Println("Введите римское число для конвертации в арабские цифры:")
	fmt.Scanln(&input)
	arabic, err := romanToArabic(input)
	if err != nil {
		fmt.Println("Ошибка:", err)
	} else {
		fmt.Printf("%s в арабских цифрах: %d\n", input, arabic)
	}
}


Заполнить двумерный массив случайными уникальными числами (less22.go)

package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {
	rand.Seed(time.Now().UnixNano())
	rows, cols := 5, 5
	numbers := make(map[int]bool)
	matrix := make([][]int, rows)
	for i := range matrix {
		matrix[i] = make([]int, cols)
		for j := range matrix[i] {
			num := rand.Intn(rows*cols) + 1
			for numbers[num] {
				num = rand.Intn(rows*cols) + 1
			}
			numbers[num] = true
			matrix[i][j] = num
		}
	}

	fmt.Println("Сгенерированный двумерный массив:")
	for _, row := range matrix {
		fmt.Println(row)
	}
}




